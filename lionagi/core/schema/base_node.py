from typing import Any, TypeVar

from pydantic import Field, AliasChoices

import lionagi.libs.ln_convert as convert
from lionagi.libs.sys_util import SysUtil
from .mix_ins import BaseFromObjectMixin, BaseToObjectMixin, BaseMetaManageMixin

T = TypeVar("T")  # Generic type for return type of from_obj method


class BaseComponentMixin(BaseFromObjectMixin, BaseToObjectMixin, BaseMetaManageMixin):
    pass


class BaseComponent(BaseComponentMixin):
    """
    A base class for components, providing foundational attributes and methods for derived classes.

    Attributes:
        id_ (str): Unique identifier for the component, generated by default.
        timestamp (str | None): Timestamp of the component's creation or modification.
        metadata (dict[str, Any]): A dictionary for storing arbitrary metadata associated with the component.

    Config:
        Defines model configuration settings such as allowing extra fields, auto-population by name,
        assignment validation, return validation, and automatic whitespace stripping for string fields.
    """

    id_: str = Field(default_factory=SysUtil.create_id, alias="node_id")
    timestamp: str | None = Field(default_factory=SysUtil.get_timestamp)
    metadata: dict[str, Any] = Field(default_factory=dict, alias="meta")

    class Config:
        """Model configuration settings."""

        extra = "allow"
        populate_by_name = True
        validate_assignment = True
        validate_return = True
        str_strip_whitespace = True

    @classmethod
    def class_name(cls) -> str:
        """
        Returns the class name of the model.
        """
        return cls.__name__

    def copy(self, *args, **kwargs) -> T:
        """
        Creates a deep copy of the instance.

        Args:
            *args: Variable-length argument list.
            **kwargs: Arbitrary keyword arguments.

        Returns:
            T: A copy of the instance.
        """
        return self.model_copy(*args, **kwargs)

    def __repr__(self):
        """
        String representation of the instance.

        Returns:
            str: A string representation of the instance.
        """
        return f"{self.__class__.__name__}({self.to_dict()})"


class BaseNode(BaseComponent):
    """
    Represents a node in a data structure, extending BaseComponent with content handling.

    Attributes:
        content (str | dict[str, Any] | None | Any): The content of the node, flexible to support various types.

    Methods:
        content_str: Returns the content as a string, with error handling for non-serializable content.
    """

    content: str | dict[str, Any] | None | Any = Field(
        default=None,
        validation_alias=AliasChoices("text", "page_content", "chunk_content"),
    )

    @property
    def content_str(self):
        """
        Attempts to serialize the content to a string.

        Returns:
            str: The content as a string, or 'null' if serialization fails.
        """
        try:
            return convert.to_str(self.content)
        except ValueError:
            print(
                f"Content is not serializable for Node: {self._id}, defaulting to 'null'"
            )
            return "null"

    def __str__(self):
        """
        Returns a string representation of the node, including a preview of its content and metadata.

        Returns:
            str: A string representation of the node.
        """
        timestamp = f" ({self.timestamp})" if self.timestamp else ""
        if self.content:
            content_preview = (
                self.content[:50] + "..." if len(self.content) > 50 else self.content
            )
        else:
            content_preview = ""
        meta_preview = (
            str(self.metadata)[:50] + "..."
            if len(str(self.metadata)) > 50
            else str(self.metadata)
        )
        return (
            f"{self.class_name()}({self.id_}, {content_preview}, {meta_preview},"
            f"{timestamp})"
        )


class BaseRelatableNode(BaseNode):
    """
    Extends BaseNode to support relationships between nodes.

    Attributes:
        related_nodes (list[str]): Identifiers of related nodes.
        label (str | None): An optional label for the node.

    Methods:
        add_related_node: Adds a node to the list of related nodes.
        remove_related_node: Removes a node from the list of related nodes.
    """

    related_nodes: list[str] = Field(default_factory=list)
    label: str | None = None

    def add_related_node(self, node_id: str) -> bool:
        """
        Adds a node ID to the related nodes list.

        Args:
            node_id (str): The identifier of the node to add.

        Returns:
            bool: True if the node was added, False if it was already in the list.
        """

        if node_id not in self.related_nodes:
            self.related_nodes.append(node_id)
            return True
        return False

    def remove_related_node(self, node_id: str) -> bool:
        """
        Removes a node ID from the related nodes list.

        Args:
            node_id (str): The identifier of the node to remove.

        Returns:
            bool: True if the node was removed, False if it was not found in the list.
        """

        if node_id in self.related_nodes:
            self.related_nodes.remove(node_id)
            return True
        return False

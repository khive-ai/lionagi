# ruff.toml

target-version = "py311"
line-length = 100

# List of files and directories to exclude from linting and formatting.
# This mirrors the typical .gitignore and common build/cache directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache", # Ruff's own cache directory
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*.pyc",
    "__pycache__",
    "tests/**/hooks/*", # Your specific exclusion
    "temp_logs/*",      # From your hatch exclude
    "logs/*",           # From your hatch exclude
]

[lint]
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "ASYNC",# flake8-async
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    # "D",    # pydocstyle (uncomment and configure below if you want to enable it)
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FLY",  # flynt
    "FURB", # refurb
    "I",    # isort (ensure this is selected for import sorting)
    "ICN",  # flake8-import-conventions
    "INT",  # flake8-gettext
    "ISC",  # implicit-str-concat (will be auto-fixed by ruff format)
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific lints
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "TID",  # ban relative imports (flake8-tidy-imports)
    "TRY",  # tryceratops
    "UP",   # pyupgrade (ensure this is selected)
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

ignore = [
    "B028",   # No explicit `stacklevel` keyword argument found
    "G004",   # Logging statement uses f-string
    "N818",   # Exception name should be named with an Error suffix
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S404",   # `subprocess` module is possibly insecure
    "E501",   # Line too long (Ruff formatter will handle this by default for formatting, this ignore helps for lint checks not auto-fixed)
    "N815",   # Variable in class scope should not be mixedCase (third-party models)
    "EXE001", # Shebang is present but file is not executable
    "SLF001", # Private member accessed (Note: you had this twice in your pyproject, once is enough)
    "TRY401", # Redundant exception object included in logging call
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "B007",   # Loop control variable not used within loop body
    "E741",   # Ambiguous variable name
    "N805",   # Default argument value is mutable (This was likely an intended ignore, you can confirm)
    "TRY300",
    "TRY301",
    # Core module specific ignores
    "B027",   # Empty method in an abstract base class without abstract decorator
    "PERF203", # try-except within a loop (common in retry/recovery patterns)
    "S311",   # Standard pseudo-random generators (we're not doing crypto)
    "ARG001", # Unused function argument (common in signal handlers, etc.)
    "ARG002", # Unused method argument (common in interface compliance)
]

# Configuration for the 'isort' import sorter.
[lint.isort]
# known-first-party = ["khive"] # Example: Define your project's own modules
# profile = "black" # Ruff's default is largely compatible with black, explicit if needed

[lint.per-file-ignores]
"test_*.py" = ["S101", "ARG002", "F841", "S108", "DTZ005", "B017", "SIM117", "RUF001", "S102", "B009"]
"**/tests/*.py" = ["S101", "ARG002", "F841", "S108", "DTZ005", "B017", "SIM117", "RUF001", "S102", "B009"]
